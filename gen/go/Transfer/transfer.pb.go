// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: Transfer/transfer.proto

package transactionv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateTransferRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	UserId           int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AmountRubKopecks int64                  `protobuf:"varint,2,opt,name=amount_rub_kopecks,json=amountRubKopecks,proto3" json:"amount_rub_kopecks,omitempty"` // Сумма в копейках (например, 12345 для 123.45 RUB)
	CryptoCurrency   string                 `protobuf:"bytes,3,opt,name=crypto_currency,json=cryptoCurrency,proto3" json:"crypto_currency,omitempty"`          // "BTC", "ETH", "USDT"
	CryptoWallet     string                 `protobuf:"bytes,4,opt,name=crypto_wallet,json=cryptoWallet,proto3" json:"crypto_wallet,omitempty"`                // Адрес кошелька
	// ЮMoney параметры
	YoomoneyReceiver string `protobuf:"bytes,5,opt,name=yoomoney_receiver,json=yoomoneyReceiver,proto3" json:"yoomoney_receiver,omitempty"` // Номер счета/телефон/email
	IdentifierType   string `protobuf:"bytes,6,opt,name=identifier_type,json=identifierType,proto3" json:"identifier_type,omitempty"`       // "account", "phone", "email"
	PaymentComment   string `protobuf:"bytes,7,opt,name=payment_comment,json=paymentComment,proto3" json:"payment_comment,omitempty"`       // Комментарий (макс. 255 символов)
	PaymentMessage   string `protobuf:"bytes,8,opt,name=payment_message,json=paymentMessage,proto3" json:"payment_message,omitempty"`       // Сообщение получателю (макс. 255 символов)
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CreateTransferRequest) Reset() {
	*x = CreateTransferRequest{}
	mi := &file_Transfer_transfer_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransferRequest) ProtoMessage() {}

func (x *CreateTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Transfer_transfer_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransferRequest.ProtoReflect.Descriptor instead.
func (*CreateTransferRequest) Descriptor() ([]byte, []int) {
	return file_Transfer_transfer_proto_rawDescGZIP(), []int{0}
}

func (x *CreateTransferRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CreateTransferRequest) GetAmountRubKopecks() int64 {
	if x != nil {
		return x.AmountRubKopecks
	}
	return 0
}

func (x *CreateTransferRequest) GetCryptoCurrency() string {
	if x != nil {
		return x.CryptoCurrency
	}
	return ""
}

func (x *CreateTransferRequest) GetCryptoWallet() string {
	if x != nil {
		return x.CryptoWallet
	}
	return ""
}

func (x *CreateTransferRequest) GetYoomoneyReceiver() string {
	if x != nil {
		return x.YoomoneyReceiver
	}
	return ""
}

func (x *CreateTransferRequest) GetIdentifierType() string {
	if x != nil {
		return x.IdentifierType
	}
	return ""
}

func (x *CreateTransferRequest) GetPaymentComment() string {
	if x != nil {
		return x.PaymentComment
	}
	return ""
}

func (x *CreateTransferRequest) GetPaymentMessage() string {
	if x != nil {
		return x.PaymentMessage
	}
	return ""
}

type TransferResponse struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	TransactionId         string                 `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`                            // UUID
	AmountRubKopecks      int64                  `protobuf:"varint,2,opt,name=amount_rub_kopecks,json=amountRubKopecks,proto3" json:"amount_rub_kopecks,omitempty"`                // Сумма в копейках (например, 12345 для 123.45 RUB)
	CryptoCurrency        string                 `protobuf:"bytes,3,opt,name=crypto_currency,json=cryptoCurrency,proto3" json:"crypto_currency,omitempty"`                         // "BTC", "ETH", "USDT"
	Status                string                 `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`                                                               // "pending", "processing", "completed", "failed"
	PaymentUrl            string                 `protobuf:"bytes,5,opt,name=payment_url,json=paymentUrl,proto3" json:"payment_url,omitempty"`                                     // Ссылка для оплаты через Yoomoney
	ContractAmountKopecks int64                  `protobuf:"varint,6,opt,name=contract_amount_kopecks,json=contractAmountKopecks,proto3" json:"contract_amount_kopecks,omitempty"` // Сумма к списанию в копейках(с комиссией)
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *TransferResponse) Reset() {
	*x = TransferResponse{}
	mi := &file_Transfer_transfer_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferResponse) ProtoMessage() {}

func (x *TransferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Transfer_transfer_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferResponse.ProtoReflect.Descriptor instead.
func (*TransferResponse) Descriptor() ([]byte, []int) {
	return file_Transfer_transfer_proto_rawDescGZIP(), []int{1}
}

func (x *TransferResponse) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *TransferResponse) GetAmountRubKopecks() int64 {
	if x != nil {
		return x.AmountRubKopecks
	}
	return 0
}

func (x *TransferResponse) GetCryptoCurrency() string {
	if x != nil {
		return x.CryptoCurrency
	}
	return ""
}

func (x *TransferResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TransferResponse) GetPaymentUrl() string {
	if x != nil {
		return x.PaymentUrl
	}
	return ""
}

func (x *TransferResponse) GetContractAmountKopecks() int64 {
	if x != nil {
		return x.ContractAmountKopecks
	}
	return 0
}

type GetTransferRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TransactionId string                 `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"` // UUID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTransferRequest) Reset() {
	*x = GetTransferRequest{}
	mi := &file_Transfer_transfer_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransferRequest) ProtoMessage() {}

func (x *GetTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Transfer_transfer_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransferRequest.ProtoReflect.Descriptor instead.
func (*GetTransferRequest) Descriptor() ([]byte, []int) {
	return file_Transfer_transfer_proto_rawDescGZIP(), []int{2}
}

func (x *GetTransferRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

type PaymentConfirmation struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	TransactionId       string                 `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`                     // UUID
	PaymentStatus       string                 `protobuf:"bytes,2,opt,name=payment_status,json=paymentStatus,proto3" json:"payment_status,omitempty"`                     // "success", "failed", "canceled"
	AmountKopecks       int64                  `protobuf:"varint,3,opt,name=amount_kopecks,json=amountKopecks,proto3" json:"amount_kopecks,omitempty"`                    // Фактическая сумма оплаты
	YoomoneyOperationId string                 `protobuf:"bytes,4,opt,name=yoomoney_operation_id,json=yoomoneyOperationId,proto3" json:"yoomoney_operation_id,omitempty"` // ID операции в ЮMoney
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *PaymentConfirmation) Reset() {
	*x = PaymentConfirmation{}
	mi := &file_Transfer_transfer_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PaymentConfirmation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentConfirmation) ProtoMessage() {}

func (x *PaymentConfirmation) ProtoReflect() protoreflect.Message {
	mi := &file_Transfer_transfer_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentConfirmation.ProtoReflect.Descriptor instead.
func (*PaymentConfirmation) Descriptor() ([]byte, []int) {
	return file_Transfer_transfer_proto_rawDescGZIP(), []int{3}
}

func (x *PaymentConfirmation) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *PaymentConfirmation) GetPaymentStatus() string {
	if x != nil {
		return x.PaymentStatus
	}
	return ""
}

func (x *PaymentConfirmation) GetAmountKopecks() int64 {
	if x != nil {
		return x.AmountKopecks
	}
	return 0
}

func (x *PaymentConfirmation) GetYoomoneyOperationId() string {
	if x != nil {
		return x.YoomoneyOperationId
	}
	return ""
}

type ConfirmationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"` // Описание ошибки (если success=false)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfirmationResponse) Reset() {
	*x = ConfirmationResponse{}
	mi := &file_Transfer_transfer_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfirmationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmationResponse) ProtoMessage() {}

func (x *ConfirmationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Transfer_transfer_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmationResponse.ProtoReflect.Descriptor instead.
func (*ConfirmationResponse) Descriptor() ([]byte, []int) {
	return file_Transfer_transfer_proto_rawDescGZIP(), []int{4}
}

func (x *ConfirmationResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ConfirmationResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

var File_Transfer_transfer_proto protoreflect.FileDescriptor

var file_Transfer_transfer_proto_rawDesc = string([]byte{
	0x0a, 0x17, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x22, 0xd4, 0x02, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x72, 0x75, 0x62, 0x5f, 0x6b, 0x6f, 0x70, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x75, 0x62, 0x4b, 0x6f, 0x70,
	0x65, 0x63, 0x6b, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x79, 0x6f, 0x6f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x79,
	0x6f, 0x6f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12,
	0x27, 0x0a, 0x0f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x81, 0x02, 0x0a, 0x10, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x72, 0x75, 0x62, 0x5f, 0x6b, 0x6f, 0x70, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x75, 0x62, 0x4b, 0x6f, 0x70,
	0x65, 0x63, 0x6b, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6b, 0x6f, 0x70, 0x65, 0x63, 0x6b,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x6f, 0x70, 0x65, 0x63, 0x6b, 0x73, 0x22, 0x3b,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xbe, 0x01, 0x0a, 0x13,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6b, 0x6f, 0x70, 0x65,
	0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x4b, 0x6f, 0x70, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x79, 0x6f, 0x6f, 0x6d,
	0x6f, 0x6e, 0x65, 0x79, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x79, 0x6f, 0x6f, 0x6d, 0x6f, 0x6e, 0x65,
	0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x14,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x32, 0xf6, 0x01, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x12, 0x1c, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1e, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x32, 0x5a,
	0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4c, 0x65, 0x78, 0x42,
	0x6f, 0x6b, 0x75, 0x6e, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x76, 0x31, 0x3b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_Transfer_transfer_proto_rawDescOnce sync.Once
	file_Transfer_transfer_proto_rawDescData []byte
)

func file_Transfer_transfer_proto_rawDescGZIP() []byte {
	file_Transfer_transfer_proto_rawDescOnce.Do(func() {
		file_Transfer_transfer_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_Transfer_transfer_proto_rawDesc), len(file_Transfer_transfer_proto_rawDesc)))
	})
	return file_Transfer_transfer_proto_rawDescData
}

var file_Transfer_transfer_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_Transfer_transfer_proto_goTypes = []any{
	(*CreateTransferRequest)(nil), // 0: transfer.CreateTransferRequest
	(*TransferResponse)(nil),      // 1: transfer.TransferResponse
	(*GetTransferRequest)(nil),    // 2: transfer.GetTransferRequest
	(*PaymentConfirmation)(nil),   // 3: transfer.PaymentConfirmation
	(*ConfirmationResponse)(nil),  // 4: transfer.ConfirmationResponse
}
var file_Transfer_transfer_proto_depIdxs = []int32{
	0, // 0: transfer.Transaction.CreateTransfer:input_type -> transfer.CreateTransferRequest
	2, // 1: transfer.Transaction.GetTransfer:input_type -> transfer.GetTransferRequest
	3, // 2: transfer.Transaction.ConfirmPayment:input_type -> transfer.PaymentConfirmation
	1, // 3: transfer.Transaction.CreateTransfer:output_type -> transfer.TransferResponse
	1, // 4: transfer.Transaction.GetTransfer:output_type -> transfer.TransferResponse
	4, // 5: transfer.Transaction.ConfirmPayment:output_type -> transfer.ConfirmationResponse
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_Transfer_transfer_proto_init() }
func file_Transfer_transfer_proto_init() {
	if File_Transfer_transfer_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_Transfer_transfer_proto_rawDesc), len(file_Transfer_transfer_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_Transfer_transfer_proto_goTypes,
		DependencyIndexes: file_Transfer_transfer_proto_depIdxs,
		MessageInfos:      file_Transfer_transfer_proto_msgTypes,
	}.Build()
	File_Transfer_transfer_proto = out.File
	file_Transfer_transfer_proto_goTypes = nil
	file_Transfer_transfer_proto_depIdxs = nil
}
